#!/bin/bash

# ASCII art banner
BANNER="
    ╔═════════════════════════════════════════════════════════════╗
    ║                                                             ║
    ║    ____                  ____           _ _                 ║
    ║   |  _ \  ___  ___ _ __ |  _ \ __ _  __| (_) ___            ║
    ║   | | | |/ _ \/ _ \  _ \| |_) / _  |/ _  | |/ _ \           ║
    ║   | |_| |  __/  __/ |_) |  _ < (_| | (_| | | (_) |          ║
    ║   |____/ \___|\___| .__/|_| \_\__,_|\__,_|_|\___/           ║
    ║                  |_|                                        ║
    ║                                                             ║
    ║              🎵 Where Music Meets Terminal 🎵               ║
    ║                                                             ║
    ╚═════════════════════════════════════════════════════════════╝
"

# Dynamic radio menu (built from available stations)
declare -A radio_menu
declare -a radio_menu_order  # Array to maintain order
stations_dir="stations"

# Function to install stations
install_stations() {
  echo "Installing radio stations..."
  
  # Check if install-stations script exists
  if [ ! -f "./install-stations" ]; then
    echo "Error: install-stations script not found!"
    echo "Please ensure install-stations is in the same directory as radio."
    exit 1
  fi
  
  # Make sure install-stations is executable
  if [ ! -x "./install-stations" ]; then
    echo "Making install-stations executable..."
    chmod +x ./install-stations
  fi
  
  # Check if stations directory exists
  if [ ! -d "$stations_dir" ]; then
    echo "Creating stations directory..."
    mkdir -p "$stations_dir"
  fi
  
  # Run install-stations and check exit code
  ./install-stations
  if [ $? -ne 0 ]; then
    echo "Failed to install stations. Please check your internet connection and try again."
    echo "You can also run './install-stations' manually to debug the issue."
    exit 1
  fi
}

# Build dynamic menu based on available station files
build_dynamic_menu() {
  # Clear the radio_menu array and order
  radio_menu=()
  radio_menu_order=()
  
  local config_file="stations/stations.conf"
  
  # Check if config file exists
  if [ ! -f "$config_file" ]; then
    echo "Error: $config_file not found!"
    echo "Please create a stations configuration file."
    exit 1
  fi
  
  # Read stations from config file and build menu
  while IFS='|' read -r station_name display_name url needs_referer; do
    # Skip empty lines and comments
    [[ -z "$station_name" || "$station_name" =~ ^# ]] && continue
    
    local station_file="${stations_dir}/${station_name}.ogg.m3u"
    if [ -f "$station_file" ]; then
      radio_menu["$display_name"]="${station_name}.ogg.m3u"
      radio_menu_order+=("$display_name")  # Maintain order
    fi
  done < "$config_file"
}

# Check dependencies
check_dependencies() {
  if ! command -v mpv &> /dev/null || ! command -v curl &> /dev/null; then
    echo "$BANNER"
    echo "Missing dependencies detected!"
    echo ""
    echo "Would you like to install dependencies automatically? (y/n)"
    read -p "> " confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
      echo "Installing dependencies..."
      ./install-deps
      if [ $? -eq 0 ]; then
        echo "✓ Dependencies installed successfully!"
        echo ""
      else
        echo "✗ Failed to install dependencies."
        echo "Please run './install-deps' manually or install mpv and curl yourself."
        exit 1
      fi
    else
      echo "Please run: ./install-deps"
      echo "This will install mpv and curl automatically."
      exit 1
    fi
  fi
}

# Function to display the radio menu
display_menu() {
  clear
  echo "$BANNER"
  echo "Radio Menu:"
  
  local index=1
  for station_name in "${radio_menu_order[@]}"; do
    echo "$index. $station_name"
    ((index++))
  done
  
  echo "$index. Quit"
}

play_radio_stream() {
  clear
  echo "$BANNER"
  echo "Playing $1" radio stream...
  mpv "${stations_dir}/${radio_menu[$1]}"
}

# Check dependencies before starting
check_dependencies

# Install stations automatically
install_stations

# Build dynamic menu based on available stations
build_dynamic_menu

# Main program loop
while true; do
  display_menu
  read -p "Select an option: " option

  # Get the number of available stations
  station_count=${#radio_menu[@]}
  quit_option=$((station_count + 1))

  # Check if option is a valid station number
  if [[ "$option" =~ ^[0-9]+$ ]] && [ "$option" -ge 1 ] && [ "$option" -le "$station_count" ]; then
    # Get station name by index (same order as display_menu)
    selected_station="${radio_menu_order[$((option - 1))]}"
    play_radio_stream "$selected_station"
  elif [ "$option" = "$quit_option" ]; then
    echo "Goodbye!"
    exit 0
  else
    echo "$BANNER"
    echo "Invalid option. Please try again."
    read -p "Press Enter to continue..."
  fi
done
